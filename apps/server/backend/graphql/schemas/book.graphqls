type Book {
  id: ID!
  name: String!
  dir: String!
  pages: [String!]!
  attributes: [BookAttribute!]!
  bookmarks: [BookBookmark!]!
  isRead: Boolean!
}

extend type Query {
  book(libraryId: ID!, bookId: ID!): Book!
}

input BookInput {
  name: String
}

input BookInitInput {
  dir: String!
}

extend type Mutation {
  createBook(libraryId: ID!, init: BookInitInput!, input: BookInput!, attributesInput: [BookAttributeInput!]): ID!
  updateBook(libraryId: ID!, bookId: ID!, input: BookInput!, attributesInput: [BookAttributeInput!]): ID!
  deleteBook(libraryId: ID!, bookId: ID!): ID!
  bookUpdateKnownPages(libraryId: ID!, bookId: ID!): [String!]!
  bookPageMarkAsRead(libraryId: ID!, bookId: ID!, page: String!): String!
  bookUpdateAttribute(libraryId: ID!, bookId: ID!, input: [BookAttributeInput!]!): ID!
  bookPageCreateBookmark(libraryId: ID!, bookId: ID!, page: String!, option: BookBookmarkInput): String!
  bookPageDeleteBookmark(libraryId: ID!, bookId: ID!, page: String!): String!
  bookPageReorderBookmark(libraryId: ID!, bookId: ID!, orderedPages: [String!]!): [BookBookmark!]!
  bookPageRecoveryBookmark(libraryId: ID!, bookId: ID!): [BookBookmark!]!
}